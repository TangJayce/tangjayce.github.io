<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>模板单例基类的实现</title>
    <link href="/2023/12/05/singleton/"/>
    <url>/2023/12/05/singleton/</url>
    
    <content type="html"><![CDATA[<h2 id="记录笔记"><a href="#记录笔记" class="headerlink" title="记录笔记"></a>记录笔记</h2><blockquote><p>使用模板实现一个基类，方便使用单例模式，可以销毁也可以重新创建一个新的单例，最后自动析构</p></blockquote><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><span class="hljs-keyword">using</span> std::cout;<span class="hljs-keyword">using</span> std::endl;<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<span class="hljs-keyword">public</span>:    <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReleaseTool</span>    &#123;    <span class="hljs-keyword">public</span>:        ~<span class="hljs-built_in">ReleaseTool</span>()        &#123;            Singleton::<span class="hljs-built_in">destroy</span>();        &#125;    &#125;;<span class="hljs-keyword">protected</span>:    <span class="hljs-built_in">Singleton</span>() = <span class="hljs-keyword">default</span>;    <span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> T* s_instance = <span class="hljs-literal">nullptr</span>;    <span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> std::mutex s_mutex;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">Singleton</span>(<span class="hljs-type">const</span> Singleton&lt;T&gt; &amp;) = <span class="hljs-keyword">delete</span>;    Singleton &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Singleton&lt;T&gt; &amp;) = <span class="hljs-keyword">delete</span>;    <span class="hljs-function"><span class="hljs-type">static</span> T* <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        cout &lt;&lt; <span class="hljs-string">&quot;get instance&quot;</span> &lt;&lt; endl;        <span class="hljs-keyword">if</span> (s_instance != <span class="hljs-literal">nullptr</span>) &#123;            <span class="hljs-keyword">return</span> s_instance;        &#125;        s_mutex.<span class="hljs-built_in">lock</span>();        <span class="hljs-keyword">if</span> (s_instance != <span class="hljs-literal">nullptr</span>) &#123;            s_mutex.<span class="hljs-built_in">unlock</span>();            <span class="hljs-keyword">return</span> s_instance;        &#125;        cout &lt;&lt; <span class="hljs-string">&quot;new instance&quot;</span> &lt;&lt; endl;        s_instance = <span class="hljs-keyword">new</span> <span class="hljs-built_in">T</span>();        <span class="hljs-type">static</span> ReleaseTool tool;        s_mutex.<span class="hljs-built_in">unlock</span>();        <span class="hljs-keyword">return</span> s_instance;    &#125;    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        s_mutex.<span class="hljs-built_in">lock</span>();        <span class="hljs-keyword">delete</span> s_instance;        s_instance = <span class="hljs-literal">nullptr</span>;        s_mutex.<span class="hljs-built_in">unlock</span>();    &#125;    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printAddress</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        cout &lt;&lt; s_instance &lt;&lt; endl;    &#125;    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Singleton</span>()    &#123;        cout &lt;&lt; <span class="hljs-string">&quot;this is singleton destruct&quot;</span> &lt;&lt; endl;    &#125;&#125;;</code></pre></div><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>如果类<code>Logic</code>需要实现单例模式，只需要继承模板类<code>Singleton&lt;Logic&gt;</code>并设置其为友元类既可</p><blockquote><p>注意，真正的单例还需把拷贝构造和复制构造给显示删除，只允许通过<code>instance</code>函数获取单例对象</p></blockquote><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Logic</span>: <span class="hljs-keyword">public</span> Singleton&lt;Logic&gt;&#123;    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&lt;Logic&gt;;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">Logic</span>(<span class="hljs-type">const</span> Logic &amp;) = <span class="hljs-keyword">delete</span>;    Logic &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Logic &amp;) = <span class="hljs-keyword">delete</span>;<span class="hljs-keyword">private</span>:    <span class="hljs-built_in">Logic</span>()    &#123;        cout &lt;&lt; <span class="hljs-string">&quot;Logic init&quot;</span> &lt;&lt; endl;    &#125;    ~<span class="hljs-built_in">Logic</span>() <span class="hljs-keyword">override</span>    &#123;        cout &lt;&lt; <span class="hljs-string">&quot;Logic destroy&quot;</span> &lt;&lt; endl;    &#125;&#125;;<span class="hljs-keyword">class</span> <span class="hljs-title class_">LogicB</span>: <span class="hljs-keyword">public</span> Singleton&lt;LogicB&gt;&#123;    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&lt;LogicB&gt;;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">LogicB</span>(<span class="hljs-type">const</span> LogicB &amp;) = <span class="hljs-keyword">delete</span>;    LogicB &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> LogicB &amp;) = <span class="hljs-keyword">delete</span>;<span class="hljs-keyword">private</span>:    <span class="hljs-built_in">LogicB</span>()    &#123;        cout &lt;&lt; <span class="hljs-string">&quot;LogicB init&quot;</span> &lt;&lt; endl;    &#125;    ~<span class="hljs-built_in">LogicB</span>() <span class="hljs-keyword">override</span>    &#123;        cout &lt;&lt; <span class="hljs-string">&quot;LogicB destroy&quot;</span> &lt;&lt; endl;    &#125;&#125;;</code></pre></div><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">auto</span> a = Logic::<span class="hljs-built_in">getInstance</span>();    <span class="hljs-keyword">auto</span> aa = LogicB::<span class="hljs-built_in">getInstance</span>();    a-&gt;<span class="hljs-built_in">printAddress</span>();    aa-&gt;<span class="hljs-built_in">printAddress</span>();    a-&gt;<span class="hljs-built_in">destroy</span>();    <span class="hljs-keyword">auto</span> b = Logic::<span class="hljs-built_in">getInstance</span>();    b-&gt;<span class="hljs-built_in">printAddress</span>();&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">test</span>();    cout &lt;&lt; <span class="hljs-string">&quot;run main&quot;</span> &lt;&lt; endl;    <span class="hljs-keyword">auto</span> c = Logic::<span class="hljs-built_in">getInstance</span>();    c-&gt;<span class="hljs-built_in">printAddress</span>();    c-&gt;<span class="hljs-built_in">destroy</span>();    <span class="hljs-keyword">auto</span> d = Logic::<span class="hljs-built_in">getInstance</span>();    d-&gt;<span class="hljs-built_in">printAddress</span>();&#125;</code></pre></div><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><div class="code-wrapper"><pre><code class="hljs text">get instancenew instanceLogic initget instancenew instanceLogicB init0x563579e4e2c00x563579e4e2e0Logic destroythis is singleton destructget instancenew instanceLogic init0x563579e4e2c0run mainget instance0x563579e4e2c0Logic destroythis is singleton destructget instancenew instanceLogic init0x563579e4e2c0LogicB destroythis is singleton destructLogic destroythis is singleton destruct</code></pre></div><blockquote><p>可以根据地址判断是同一个对象，并且正常析构</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单例模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深夜两人的激情文爱</title>
    <link href="/2023/10/24/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/"/>
    <url>/2023/10/24/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="深夜两人的激情文爱"><a href="#深夜两人的激情文爱" class="headerlink" title="深夜两人的激情文爱"></a>深夜两人的激情文爱</h1><p><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/01.png" alt="01"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/02.png" alt="02"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/03.png" alt="03"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/04.png" alt="04"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/05.png" alt="05"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/06.png" alt="06"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/07.png" alt="07"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/08.png" alt="08"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/09.png" alt="09"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/10.png" alt="10"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/11.png" alt="11"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/12.png" alt="12"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/13.png" alt="13"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/14.png" alt="14"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/15.png" alt="15"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/16.png" alt="16"><br><img src="/pic/%E6%B7%B1%E5%A4%9C%E4%B8%A4%E4%BA%BA%E7%9A%84%E6%BF%80%E6%83%85%E6%96%87%E7%88%B1/17.png" alt="17"></p>]]></content>
    
    
    <categories>
      
      <category>漫画</category>
      
    </categories>
    
    
    <tags>
      
      <tag>G</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/23/hello-world/"/>
    <url>/2023/10/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>新手指引</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
